/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoplayPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  autoplayAudio: true,
  autoplayVideo: true
};
var AutoplayPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("LOADED");
    await this.loadSettings();
    this.addSettingTab(new AutoplaySettingTab(this.app, this));
    this.registerInterval(
      window.setInterval(() => {
        const mediaElements = activeDocument.querySelectorAll("video, audio");
        mediaElements.forEach((mediaElement) => {
          const isVideo = mediaElement.tagName.toLowerCase() === "video";
          const isAudio = mediaElement.tagName.toLowerCase() === "audio";
          if (isVideo && this.settings.autoplayVideo || isAudio && this.settings.autoplayAudio) {
            mediaElement.autoplay = true;
            mediaElement.loop = true;
            mediaElement.play();
          }
        });
      }, 1e3)
    );
  }
  onunload() {
    console.log("UNLOADED");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AutoplaySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Autoplay Settings" });
    new import_obsidian.Setting(containerEl).setName("Autoplay Audio").setDesc("Automatically play audio").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoplayAudio).onChange(async (value) => {
        this.plugin.settings.autoplayAudio = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Autoplay Video").setDesc("Automatically play video").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoplayVideo).onChange(async (value) => {
        this.plugin.settings.autoplayVideo = value;
        await this.plugin.saveSettings();
      })
    );
  }
};


/* nosourcemap */